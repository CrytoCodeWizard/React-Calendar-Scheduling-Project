/**
 * Gantt-Schedule-Timeline-Calendar helpers
 *
 * @copyright NEURONET - Rafal Pospiech
 * @author    Rafal Pospiech <neuronet.io@gmail.com>
 * @module    gantt-schedule-timeline-calendar
 * @link      https://github.com/neuronetio/gantt-schedule-timeline-calendar
 * @link      https://gantt-schedule-timeline-calendar.neuronet.io
 * @version   3.33.13
 * @released  2022-08-10
 * @license   SEE LICENSE IN LICENSE FILE
 */
/**
 * TimeBookmarks plugin
 *
 * @copyright NEURONET - Rafal Pospiech
 * @author    Rafal Pospiech <neuronet.io@gmail.com>
 * @module    gantt-schedule-timeline-calendar
 * @link      https://github.com/neuronetio/gantt-schedule-timeline-calendar
 * @link      https://gantt-schedule-timeline-calendar.neuronet.io
 * @version   3.33.13
 * @released  2022-08-10
 * @license   SEE LICENSE IN LICENSE FILE
 */
const t="config.plugin.TimeBookmarks",s="config.slots.chart-timeline-items.outer";class e{constructor(e,i){this.unsub=[],this.options=function(t){return Object.assign({enabled:!0,className:""},t)}(e),this.vido=i,this.state=i.state,this.className=function(t,s=""){let e=`gstc__${t}`;return"gstc"===t&&(e="gstc"),s?`${e} ${e}--${s.replace(":","-")}`:e}("chart-time-bookmark")+(this.options.className?` ${this.options.className}`:""),this.PluginTimeBookmarksSlot=this.PluginTimeBookmarksSlot.bind(this),this.destroy=this.destroy.bind(this),this.state.update(t,this.options),this.state.update(s,(t=>(t.includes(this.PluginTimeBookmarksSlot)||t.push(this.PluginTimeBookmarksSlot),t))),this.unsub.push(this.state.subscribe(t,(t=>this.options=t)))}destroy(){this.unsub.forEach((t=>t())),this.state.update(s,(t=>t.filter((t=>t!==this.PluginTimeBookmarksSlot)))),this.vido.api.pluginDestroyed("TimeBookmarks")}PluginTimeBookmarksSlot(s){const{html:e,onDestroy:i,state:a,update:l,api:o,StyleMap:n}=s,c=[];i(a.subscribeAll([t,"$data.chart.time","$data.scroll.horizontal.dataIndex"],(()=>{var s;const e=a.get("$data.chart.time"),i=a.get(t);c.length=0;for(const t in i.bookmarks){const a=o.time.date(i.bookmarks[t].time);if(!o.time.isInCurrentView(a,e))continue;const l=Object.assign(Object.assign({},i.bookmarks[t]),{id:t,leftViewPx:0,absoluteLeftPx:0,visible:!1,date:null,styleMap:new n(Object.assign(null!==(s=i.bookmarks[t].style)&&void 0!==s?s:{},{left:"",height:""}))});l.styleMap.style.background=l.styleMap.style.background||l.color||"#3498DB",l.id=t,l.date=a,l.leftViewPx=o.time.getViewOffsetPxFromDates(a,!1,e),l.absoluteLeftPx=o.time.getGlobalOffsetPxFromDates(l.date,!1,e),l.visible=l.absoluteLeftPx>=e.leftPx&&l.absoluteLeftPx<=e.rightPx,c.push(l)}l()}),{group:!0}));let r=0,h=0;i(a.subscribe("$data.scroll.vertical",(t=>{r=Math.round(o.getRealChartHeight()),h=Math.round(-t.preciseOffset),l()})));const m=t=>e`<div
        class="${this.className}-line ${this.className}-line--${t.id}${t.className?` ${t.className}`:""}"
        style="left:${t.leftViewPx}px;top: ${h}px;"
      >
        <div
          class="${this.className}-line-content ${this.className}-line-content--${t.id}"
          style="border-left: 1px solid ${t.styleMap.style.background};"
        ></div>
      </div>`,d=t=>e`<div
        class="${this.className}-label ${this.className}-label--${t.id}${t.className?` ${t.className}`:""}"
        style="left:${t.leftViewPx}px;top: ${h}px;"
      >
        <div
          class="${this.className}-label-content ${this.className}-label-content--${t.id}"
          style=${t.styleMap.directive()}
        >
          ${t.label}
        </div>
      </div>`;return t=>e`<div class="${this.className}s ${this.className}s--lines" style="height: ${r}px;">
          ${c.filter((t=>t.visible)).map((t=>m(t)))}
        </div>
        ${t}
        <div class="${this.className}s ${this.className}s--labels" style="height: ${r}px;">
          ${c.filter((t=>t.visible)).map((t=>d(t)))}
        </div>`}}function i(s={}){return function(i){const a=i.state.get(t);a&&(s=i.api.mergeDeep({},s,a));const l=new e(s,i);return i.api.pluginInitialized("TimeBookmarks"),l.destroy}}export{i as Plugin,t as pluginPath,s as slotPath};