const pluginPath = 'config.plugin.ItemTypes';
const templatePath = 'config.templates.chart-timeline-items-row-item';
function getOptions(options) {
    return options;
}
class ItemTypes {
    destroy() {
        this.unsub.forEach((unsub)=>unsub()
        );
        this.state.update(templatePath, null);
        this.vido.api.pluginDestroyed('ItemTypes');
    }
    template() {
        //const { html, onDestroy, state, update, api } = vido;
        return (content)=>content
        ;
    }
    constructor(options1, vido){
        this.unsub = [];
        this.options = getOptions(options1);
        this.vido = vido;
        this.state = vido.state;
        this.api = vido.api;
        this.template = this.template.bind(this);
        this.destroy = this.destroy.bind(this);
        this.state.update(pluginPath, this.options);
        this.state.update(templatePath, this.template);
        this.unsub.push(this.state.subscribe(pluginPath, (options)=>this.options = options
        ));
        this.api.pluginInitialized('ItemTypes');
    }
}
function Plugin(options = {}) {
    return function initialize(vidoInstance) {
        const currentOptions = vidoInstance.state.get(pluginPath);
        if (currentOptions) options = vidoInstance.api.mergeDeep({}, options, currentOptions);
        const itemTypes = new ItemTypes(options, vidoInstance);
        return itemTypes.destroy;
    };
}
export { pluginPath as pluginPath };
export { templatePath as templatePath };
export { Plugin as Plugin };
