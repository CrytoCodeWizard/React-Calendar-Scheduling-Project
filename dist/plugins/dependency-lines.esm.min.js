/**
 * Gantt-Schedule-Timeline-Calendar helpers
 *
 * @copyright NEURONET - Rafal Pospiech <https://neuronet.io>
 * @author    Rafal Pospiech <neuronet@neuronet.io>
 * @module    gantt-schedule-timeline-calendar
 * @link      https://github.com/neuronetio/gantt-schedule-timeline-calendar
 * @version   3.16.1
 * @released  2022-01-06
 * @license   SEE LICENSE IN LICENSE FILE
 */
function t(t,i=""){let e=`gstc__${t}`;return"gstc"===t&&(e="gstc"),i?`${e} ${e}--${i.replace(":","-")}`:e}
/**
 * DependencyLines plugin
 *
 * @copyright NEURONET - Rafal Pospiech <https://neuronet.io>
 * @author    Rafal Pospiech <neuronet@neuronet.io>
 * @module    gantt-schedule-timeline-calendar
 * @link      https://github.com/neuronetio/gantt-schedule-timeline-calendar
 * @version   3.16.1
 * @released  2022-01-06
 * @license   SEE LICENSE IN LICENSE FILE
 */const i="config.plugin.DependencyLines",e="config.slots.chart-timeline-items.outer",n=t("chart-timeline-dependency-lines-lines"),o=t("chart-timeline-dependency-lines-lines-line"),s=t("chart-timeline-dependency-lines-points"),p=t("chart-timeline-dependency-lines-points-point");class a{constructor(t,n){this.onDestroy=[],this.vido=t,this.api=this.vido.api,this.state=this.vido.state;const o=this.vido.html`<div class=${p+"--left"}></div>`,s=this.vido.html`<div class=${p+"--right"}></div>`;this.data=function(t){return Object.assign(Object.assign({},t),{lines:[]})}(function(t,i,e){const n=Object.assign(Object.assign({},function(t,i){return{type:"smooth",onLines:[],onLine:[],leftPoint:{content:t,width:10,height:10},rightPoint:{content:i,width:10,height:10}}}(i,e)),t);return t.leftPoint&&(n.leftPoint=Object.assign(Object.assign({},n.leftPoint),t.leftPoint)),t.rightPoint&&(n.rightPoint=Object.assign(Object.assign({},n.rightPoint),t.rightPoint)),n}(n,o,s)),this.slot=this.slot.bind(this),this.generateLines=this.generateLines.bind(this),this.destroy=this.destroy.bind(this),this.updateData(),this.onDestroy.push(this.state.subscribe(i,(t=>{this.data=t}))),this.state.update(e,(t=>(t.includes(this.slot)||t.push(this.slot),t))),this.onDestroy.push(this.state.subscribeAll(["$data.chart.items","$data.list.rowsHeight","$data.scroll","$data.chart.time.leftGlobal"],this.generateLines,{group:!0}))}destroy(){this.state.update(e,(t=>t.filter((t=>t!==this.slot)))),this.onDestroy.forEach((t=>t())),this.api.pluginDestroyed("DependencyLines")}updateData(){this.state.update(i,this.data),this.vido.update()}setStraightPoints(t){const{topOffset:i,leftOffset:e,fromItemData:n,toItemData:o,fromRowData:s,toRowData:p}=t;if(!this.api.parentsExpanded(s.id)||!this.api.parentsExpanded(p.id))return;const a=this.api.getRowViewTop(s.id),h=this.api.getRowViewTop(p.id);t.points.push({x:n.position.right+e,y:this.api.parentsExpanded(s.id)?n.position.viewTop+i:a,type:"M",content:this.data.leftPoint.content}),t.points.push({x:o.position.left-e,y:this.api.parentsExpanded(p.id)?o.position.viewTop+i:h,type:"L",content:this.data.rightPoint.content})}setSquareAltPoints(t){const{topOffset:i,leftOffset:e,fromItemData:n,toItemData:o,fromRowData:s,toRowData:p}=t;if(!this.api.parentsExpanded(s.id)&&!this.api.parentsExpanded(p.id))return;const a=(o.position.left-n.position.right)/2,h=n.position.right+a,d=(o.position.viewTop-n.position.viewTop)/2,r=n.position.viewTop+d,l=this.api.getRowViewTop(s.id),c=this.api.getRowViewTop(p.id);t.points.push({x:n.position.right+e,y:this.api.parentsExpanded(s.id)?n.position.viewTop+i:l,type:"M",content:this.data.leftPoint.content}),o.position.left<n.position.right?(t.points.push({x:n.position.right+e+10,y:this.api.parentsExpanded(s.id)?n.position.viewTop+i:l,type:"L",content:null}),t.points.push({x:n.position.right+e+10,y:this.api.parentsExpanded(s.id)?r+i:l,type:"L",content:null})):t.points.push({x:h,y:this.api.parentsExpanded(s.id)?n.position.viewTop+i:l,type:"L",content:null}),t.points.push({x:h,y:this.api.parentsExpanded(s.id)?r+i:l,type:"L",content:null}),this.api.parentsExpanded(p.id)?(o.position.left<n.position.right?(t.points.push({x:o.position.left-e-10,y:this.api.parentsExpanded(s.id)?r+i:l,type:"L",content:null}),t.points.push({x:o.position.left-e-10,y:this.api.parentsExpanded(p.id)?o.position.viewTop+i:l,type:"L",content:null})):t.points.push({x:h,y:this.api.parentsExpanded(p.id)?o.position.viewTop+i:l,type:"L",content:null}),t.points.push({x:o.position.left-e,y:this.api.parentsExpanded(p.id)?o.position.viewTop+i:c,type:"L",content:this.data.rightPoint.content})):t.points.push({x:h,y:c,type:"L",content:this.data.rightPoint.content})}setSquarePoints(t){const{topOffset:i,leftOffset:e,fromItemData:n,toItemData:o,fromRowData:s,toRowData:p}=t;if(!this.api.parentsExpanded(s.id)&&!this.api.parentsExpanded(p.id))return;const a=this.api.getRowViewTop(s.id),h=this.api.getRowViewTop(p.id);t.points.push({x:n.position.right+e,y:this.api.parentsExpanded(s.id)?n.position.viewTop+i:a,type:"M",content:this.data.leftPoint.content}),n.position.viewTop!==o.position.viewTop?o.position.left<n.position.right?(t.points.push({x:n.position.right+e+10,y:this.api.parentsExpanded(s.id)?n.position.viewTop+i:a,type:"L",content:null}),o.position.viewTop>n.position.viewTop?(t.points.push({x:n.position.right+e+10,y:this.api.parentsExpanded(s.id)?a+s.outerHeight:a,type:"L",content:null}),t.points.push({x:o.position.left+e+10,y:this.api.parentsExpanded(s.id)?a+s.outerHeight:a,type:"L",content:null}),t.points.push({x:o.position.left+e+10,y:this.api.parentsExpanded(p.id)?o.position.viewTop:h,type:"L",content:this.data.rightPoint.content})):(t.points.push({x:n.position.right+e+10,y:a,type:"L",content:null}),t.points.push({x:o.position.left+e+10,y:a,type:"L",content:null}),t.points.push({x:o.position.left+e+10,y:this.api.parentsExpanded(p.id)?o.position.viewTop+o.actualHeight:h,type:"L",content:this.data.rightPoint.content}))):(t.points.push({x:o.position.left+10,y:this.api.parentsExpanded(s.id)?n.position.viewTop+i:a,type:"L",content:null}),o.position.viewTop>n.position.viewTop?t.points.push({x:o.position.left+10,y:this.api.parentsExpanded(p.id)?o.position.viewTop:h,type:"L",content:this.data.rightPoint.content}):t.points.push({x:o.position.left+10,y:this.api.parentsExpanded(p.id)?o.position.viewTop+o.actualHeight:h,type:"L",content:this.data.rightPoint.content})):t.points.push({x:o.position.left-e,y:this.api.parentsExpanded(p.id)?o.position.viewTop+i:h,type:"L",content:this.data.rightPoint.content})}setSmoothPoints(t){const{topOffset:i,leftOffset:e,fromItemData:n,toItemData:o,fromRowData:s,toRowData:p}=t;if(!this.api.parentsExpanded(s.id)&&!this.api.parentsExpanded(p.id))return;const a=this.api.getRowViewTop(s.id),h=this.api.getRowViewTop(p.id);if(t.points.push({x:n.position.right+e,y:this.api.parentsExpanded(s.id)?n.position.viewTop+i:a,type:"M",content:this.data.leftPoint.content}),n.position.viewTop===o.position.viewTop)return void t.points.push({x:o.position.left-e,y:this.api.parentsExpanded(p.id)?o.position.viewTop+i:h,type:"L",content:this.data.rightPoint.content});const d=(o.position.left-n.position.right)/2,r=n.position.right+d;if(n.position.right<=o.position.left)t.points.push({x:r,y:this.api.parentsExpanded(s.id)?n.position.viewTop+i:a,type:"C",content:null}),t.points.push({x:r,y:this.api.parentsExpanded(p.id)?o.position.viewTop+i:h,type:"",content:null}),t.points.push({x:o.position.left-e,y:this.api.parentsExpanded(p.id)?o.position.viewTop+i:h,type:"",content:this.data.rightPoint.content});else{const d=(o.position.viewTop-n.position.viewTop)/2,l=n.position.viewTop+d+i;t.points.push({x:n.position.right+20,y:this.api.parentsExpanded(s.id)?n.position.viewTop+i:a,type:"C",content:null}),t.points.push({x:n.position.right+40,y:l,type:"",content:null}),t.points.push({x:r,y:l,type:"",content:null}),t.points.push({x:o.position.left+e-20,y:this.api.parentsExpanded(p.id)?o.position.viewTop+i:h,type:"S",content:null}),t.points.push({x:o.position.left+e,y:this.api.parentsExpanded(p.id)?o.position.viewTop+i:h,type:"",content:this.data.rightPoint.content})}}setPoints(t){const{fromItemData:i,toItemData:e,fromRowData:n,toRowData:o,toItem:s,fromItem:p}=t,a=this.state.get("$data.chart.time"),h=this.state.get("config.chart.spacing");switch(this.api.calculateItemPosition(i.id,i,n,a,h,p),this.api.calculateItemPosition(e.id,e,o,a,h,s),t.type){case"straight":this.setStraightPoints(t);break;case"square":this.setSquarePoints(t);break;case"smooth":this.setSmoothPoints(t);break;case"square-alt":this.setSquareAltPoints(t)}}generateLines(){const t=[],i=this.api.getAllItems(),e=this.api.getRowsData(),n=this.api.getItemsData(),s=this.state.get("$data.chart.time"),p=this.state.get("config.chart.spacing"),a=this.state.get("$data.chart.dimensions"),h=this.data.type;for(const d in i){const r=i[d];if(!r.dependant)continue;if(!r.dependant.length)continue;const l=e[r.rowId],c=n[d],u=r;if(c&&l)for(const f of r.dependant){const r=i[f],g=r,y=e[r.rowId],w=n[f];if(!w||!y)continue;if(s.calculatedZoomMode){if(u.time.end<s.leftGlobal&&g.time.start>s.rightGlobal)continue;if(g.time.end<s.leftGlobal&&u.time.start>s.rightGlobal)continue;if(u.time.start>s.rightGlobal&&g.time.start>s.rightGlobal)continue;if(u.time.end<s.leftGlobal&&g.time.end<s.leftGlobal)continue}if(this.api.calculateItemPosition(d,c,l,s,p),this.api.calculateItemPosition(f,w,y,s,p),c.detached&&w.detached)continue;if(-1===c.width&&-1===w.width)continue;const x=c.actualHeight/2,m=0;let v={x:0,y:0,width:a.width,height:a.height,topOffset:x,leftOffset:m,points:[],type:h,fromItemData:c,toItemData:w,fromItem:u,toItem:g,fromRowData:l,toRowData:y,className:o};for(const t of this.data.onLine)v=t(v);this.setPoints(v),t.push(v)}}this.data.lines=t;for(const t of this.data.onLines)this.data.lines=t(this.data.lines);this.updateData()}slot(t){const{html:i,svg:e}=t,o=t=>{if(!t.points.length)return"";const i=t.points.slice(),e=i.shift();return[`${e.type} ${e.x} ${e.y}`,[...i.map((t=>`${t.type} ${t.x} ${t.y}`))]].join(" ")},a=(t,e)=>{const n=`left:${t.x-(0===e?this.data.leftPoint.width/2:this.data.rightPoint.width/2)}px;top:${t.y-(0===e?this.data.leftPoint.height/2:this.data.rightPoint.height/2)}px;width:${0===e?this.data.leftPoint.width:this.data.rightPoint.width}px;height:${0===e?this.data.leftPoint.width:this.data.rightPoint.width}px`;return t.content?i`<div class=${p+" "+p+"--"+this.data.type} style=${n}>
            ${t.content}
          </div>`:null},h=t=>e`<svg width=${t.width} height=${t.height} xmlns="http://www.w3.org/2000/svg">
        <path d=${(t=>{switch(t.type){case"straight":return(t=>{const i=t.points;return[`${i[0].type} ${i[0].x} ${i[0].y}`,`${i[1].type} ${i[1].x} ${i[1].y}`].join(" ")})(t);case"square":case"square-alt":return o(t);case"smooth":return(t=>{if(!t.points.length)return"";const i=t.points.slice(),e=i.shift();return[`${e.type} ${e.x} ${e.y}`,[...i.map((t=>`${t.type} ${t.x} ${t.y}`))]].join(" ")})(t)}})(t)} />
      </svg>`;return t=>i`<div class="${n}">${this.data.lines.map((t=>(t=>i`<div
      class=${t.className}
      style="left: ${t.x}px; top: ${t.y}px; width: ${t.width}px; height: ${t.height}px;"
    >
      ${h(t)}
    </div>`)(t)))}</div>
        ${t}
        <div class="${s}">${this.data.lines.map((t=>(t=>t.points.map(((t,i)=>a(t,i))))(t)))}</div>`}}function h(t={}){return function(e){const n=e.api,o=e.state.get(i);o&&(t=e.api.mergeDeep({},t,o));const s=new a(e,t);return n.pluginInitialized("DependencyLines"),s.destroy}}export{h as Plugin};